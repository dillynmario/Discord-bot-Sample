/**actioins */

const {
    promisify
} = require('util')
const path = require('path')

const download = promisify(require('download-git-repo'))

const {
    vuerepo
} = require('../../config/repo-config')
const {
    commandSpawn
} = require('../../utils/terminal')
const {
    compile,
    writeFile,
    mkdirSync
} = require('../../utils/utils')


// create a vue template action
const createVueProjectAction = async (project, others) => {

    console.log(project, others)

    // 1 clone project
    console.log('coderz helps you clone a vue template, this requires a budget...')

    await download(vuerepo, project, {
        clone: true
    });

    // 2 npm install
    const commandTerminal = process.platform === 'win64'? 'npm.cmd' : 'npm'
    await commandSpawn(commandTerminal, ['install'], {
        cwd: `./${project}`
    })
    // 3 run serve
    commandSpawn(commandTerminal, ['run', 'serve'], {
        cwd: `./${project}`
    })

    // 4 z-vue-template install it --open 

}


// create component action
const addComponentAction = async (name, dest) => {
    // needs ejs template ->  .vue 
    const result = await compile('vue-component.ejs', {
        name,
        lowerName: name.toLowerCase()
    })
    // write to source folder
    const targetPath = path.resolve(dest || 'src/components', `${name}.vue`)
    writeFile(targetPath, result)

}

// create pages and routes
const addPageAndRouteAction = async (name, dest) => {
    // 编译模板
    const pageResult = await compile('vue-component.ejs', {
        name,
        lowerName: name.toLowerCase()
    })

    const routeResult = await compile('vue-router.ejs', {
        name,
        lowerName: name.toLowerCase()
    })
    // 写入文件
    const targetDest = path.resolve(dest,name.toLowerCase())

    console.log(targetDest)
    if (mkdirSync(targetDest)) {
        const targetPagePath = path.resolve(targetDest, `${name}.vue`)
        const targetRoutePath = path.resolve(targetDest, `router.js`)
        writeFile(targetPagePath, pageResult)
        writeFile(targetRoutePath, routeResult)
    }
}

const addStoreAction =async (name,dest)=>{
    const storeResult =await compile('vue-store.ejs',{})
    const typesResult =await compile('vue-types.ejs',{})
    
    //创建文件
    const targetDest = path.resolve(dest,name.toLowerCase())
    if(mkdirSync(targetDest)){
        const targetStorePath = path.resolve(targetDest, `${name}.js`)
        const targetTypesPath = path.resolve(targetDest, `types.js`)
        writeFile(targetStorePath, storeResult)
        writeFile(targetTypesPath, typesResult)
    }
}


module.exports = {
    createVueProjectAction,
    addComponentAction,
    addPageAndRouteAction,
    addStoreAction
}